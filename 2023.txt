windows上VS项目运行devdemo，注意.h,.lib,.dll文件
	添加include头文件、lib库   https://blog.csdn.net/Xminyang/article/details/80853422
	dll文件放在exe相同的文件夹里
linux上配置32位程序兼容  https://blog.csdn.net/q1302182594/article/details/51610902
linux上通过makefile文件编译  写好makefile文件后直接命令行输入 make
linux上运行编译生成的文件 直接命令行输入 ./文件名

linux上makefile文件的编写 https://zhuanlan.zhihu.com/p/359807792
////////////
#  $@，$^，$<代表的意义分别是： $@--目标文件，$^--所有的依赖文件，$<--第一个依赖文件。
VERSION 	=1
CC			=gcc
TARGET		=sdkdemo
DEBUG 		= 
#CFLAGS 表示用于 C 编译器的选项
#-no-pie 不要创建 position independent executable
#-rdynamic选项新添加的是动态连接符号信息，用于动态连接功能，
#-D_GNU_SOURCE 这个参数表示你编写符合 GNU 规范的代码
#GCC链接操作是以section作为最小的处理单元，只要一个section中的某个符号被引用，该section就会被加入到可执行程序中去。
#因此，GCC在编译时可以使用 -ffunction-sections和 -fdata-sections 将每个函数或符号创建为一个sections，其中每个sections名与function或data名保持一致。
#而在链接阶段， -Wl,–gc-sections 指示链接器去掉不用的section（其中-wl, 表示后面的参数 -gc-sections 传递给链接器），这样就能减少最终的可执行程序的大小了。
CFLAGS		= -no-pie -rdynamic -O2 -Wall -D_GNU_SOURCE -ffunction-sections -fdata-sections -D_COS_OS=_COS_LINUX

LIB_NAMES 	= -lcommon -lcos -lthirdparty -lpthread -lm -ldl -lmbedtls -lmbedx509 -lmbedcrypto

LIB_PATH 	+= -L./static #lib库的路径
#LIB_PATH 	+= -L./lib/static/test
#LIB_PATH 	+= -L./thirdparty/lib

INCLUDES	+= -I./include #lnclude 头文件的路径
#INCLUDES	+= -I./include/test
INCLUDES	+= -I./thirdparty/include
INCLUDES	+= -I./src/include

SRC	 	+=$(wildcard ./*.c) #扩展通配符，取当前目录下所有.c文件
#NOUSEFULE += ./src/audio.c
SOURCES = $(filter-out $(NOUSEFULE),$(SRC))

OBJ			=$(patsubst %.c, %.o, $(SOURCES))#替换, patsubst 把$(SOURCE)中的变量符合后缀是.c的全部替换成.o

all:$(TARGET)#编译结果 sdkdemo.a

#links
$(TARGET):$(OBJ)
	$(CC) $(CFLAGS) $(OBJ) $(LIB_PATH) $(LIB_NAMES) -o $(TARGET)_$(VERSION)

#compile
%.o: %.c
	$(CC) $(INCLUDES) $(DEBUG) -c $(CFLAGS) $< -o $@

.PHONY:clean
clean:
	@echo "Remove linked and compiled files......"
	rm -rf $(OBJ) $(TARGET)_$(VERSION)
////////


回调函数

////////
定义回调函数指针，定义PFUN_LISTENSESION_STATUS类型的函数指针
typedef int (*PFUN_LISTENSESION_STATUS)(unsigned int uiSessionId,int iConStatus);
回调函数实现
int cf(unsigned int a,int b){return 0;}
回调函数作为参数输入某个函数
函数cf需要传入一个PFUN_LISTENSESION_STATUS类型的函数指针
int cf(PFUN_LISTENSESION_STATUS cf);
和定义的函数指针类型相同的任意函数（相同类型的返回值和参数列表），都可以直接把这个函数名当作参数传入需要PFUN_LISTENSESION_STATUS类型参数的函数中
set_cf(cf);//注册函数（回调函数）
eg
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int(*callBackF)(int a,int b);//定义回调函数指针
int fun(int a,int b){printf("fun\n");return 0;}//这个函数名作为回调函数指针传入
int setCF(callBackF fun){fun(1,2);return 0;}//只需传入函数名即可，在这个函数里运行传入的函数时再传入参数
int main(){
setCF(fun);
system("pause");
return 0;
}
////////

wireshark抓取电脑和虚拟机之间的传输 ：虚拟机使用nat方式（默认方式）连接网络，那么应该对于VMnet8

静态库和动态库的制作和使用
https://blog.csdn.net/weixin_47826078/article/details/120474883
生成的库不一定需要移动到usr/lib之类的文件夹，直接放在对应工程文件夹中的lib文件夹，方便makefile编译


回调函数中不进行阻塞操作，阻塞操作一般在主函数中运行。
阻塞IO：在准备阶段即同步阻塞，应用进程调用I/O操作时阻塞，只有等待要操作的数据准备好，并复制到应用进程的缓冲区中才返回；

打洞 https://blog.csdn.net/Tornado1102/article/details/76093884

如果两个IP地址在子网掩码的按位与的计算下所得结果相同，即表明它们共属于同一子网中。

Ubuntu 16.04 LTS无法打开“系统设置” https://blog.csdn.net/u25th_engineer/article/details/93719298

c++学习网 https://en.cppreference.com/w/

pdf工具 https://tools.pdf24.org/zh/creator
磁盘检测整理工具 https://www.diskgenius.cn/
